{"version":3,"file":"app.bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACmD;AACpC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,YAAY,+DAAe;AAC3B;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;AC9CA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;ACjGmD;AACtB;AAC7B;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA,yBAAyB,gDAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C,wCAAwC,2DAAe;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,2DAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,QAAQ;AAC9D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5IA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVmC;AACnC;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,WAAW;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnF6B;AACF;AAC3B;AACA;AACA;AACA;AACO;AACQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gDAAI;AAClC;AACA;AACA,wBAAwB,+CAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gDAAI;AAClC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;ACvK+B;AACI;AAC5B,oBAAoB,mDAAO;AAClC,IAAI,iDAAK;AACT;;;;;;;UCJA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA","sources":["webpack://to-do-list/./build/app/Input.js","webpack://to-do-list/./build/app/Item.js","webpack://to-do-list/./build/app/List.js","webpack://to-do-list/./build/app/PlaceholderItem.js","webpack://to-do-list/./build/app/Tab.js","webpack://to-do-list/./build/app/TabList.js","webpack://to-do-list/./build/app/app.js","webpack://to-do-list/webpack/bootstrap","webpack://to-do-list/webpack/runtime/define property getters","webpack://to-do-list/webpack/runtime/hasOwnProperty shorthand","webpack://to-do-list/webpack/runtime/make namespace object","webpack://to-do-list/webpack/before-startup","webpack://to-do-list/webpack/startup","webpack://to-do-list/webpack/after-startup"],"sourcesContent":["const input = document.getElementById('input');\r\nconst emptyStarSVG = document.querySelectorAll('.input-star')[0];\r\nconst starSVG = document.querySelectorAll('.input-star')[1];\r\nconst HTMLlist = document.getElementById('list');\r\nimport { currentList as list } from './TabList.js';\r\nexport default class Input {\r\n    element;\r\n    isStarred;\r\n    constructor() {\r\n        this.element = input;\r\n        this.isStarred = false;\r\n        this.setupListeners();\r\n    }\r\n    get value() {\r\n        return this.element.value;\r\n    }\r\n    clear() {\r\n        this.element.value = '';\r\n        this.unStar();\r\n    }\r\n    star() {\r\n        emptyStarSVG.style.display = 'none';\r\n        starSVG.style.display = 'block';\r\n        this.isStarred = true;\r\n    }\r\n    unStar() {\r\n        starSVG.style.display = 'none';\r\n        emptyStarSVG.style.display = 'block';\r\n        this.isStarred = false;\r\n    }\r\n    setupListeners() {\r\n        emptyStarSVG.addEventListener('click', () => {\r\n            this.star();\r\n        });\r\n        starSVG.addEventListener('click', () => {\r\n            this.unStar();\r\n        });\r\n        this.element.addEventListener('keydown', (e) => {\r\n            if (e.key !== 'Enter')\r\n                return;\r\n            e.preventDefault();\r\n            list.createItem(this.value, undefined, this.isStarred);\r\n            HTMLlist.scrollTop = HTMLlist.scrollHeight;\r\n            this.clear();\r\n        });\r\n    }\r\n}\r\n","const itemTemplate = document.getElementById('item');\r\nexport default class Item {\r\n    content;\r\n    id;\r\n    isStarred;\r\n    isDone;\r\n    element;\r\n    #emptyCheckboxSVG;\r\n    #checkboxSVG;\r\n    #emptyStarSVG;\r\n    #starSVG;\r\n    #deleteSVG;\r\n    constructor(content, id, isStarred, isDone) {\r\n        this.content = content;\r\n        this.id = id;\r\n        this.isStarred = isStarred;\r\n        this.isDone = isDone;\r\n        this.createItem();\r\n    }\r\n    createItem() {\r\n        const itemTemplateClone = itemTemplate.cloneNode(true);\r\n        this.element = itemTemplateClone.content.firstElementChild;\r\n        this.#emptyCheckboxSVG = this.element.querySelector('.checkbox-empty');\r\n        this.#checkboxSVG = this.element.querySelector('.checkbox');\r\n        this.#emptyStarSVG = this.element.querySelector('.star-empty');\r\n        this.#starSVG = this.element.querySelector('.star');\r\n        this.#deleteSVG = this.element.querySelector('.deleteSVG');\r\n        this.element.querySelector('.content').textContent = this.content;\r\n        this.element.id = this.id;\r\n        this.#setStarred();\r\n        this.#setDone();\r\n        this.setupInput();\r\n    }\r\n    #setStarred() {\r\n        if (this.isStarred) {\r\n            this.#emptyStarSVG.style.display = 'none';\r\n            this.#starSVG.style.display = 'block';\r\n            this.element.classList.add('starred');\r\n        }\r\n        else {\r\n            this.#emptyStarSVG.style.display = 'block';\r\n            this.#starSVG.style.display = 'none';\r\n            this.element.classList.remove('starred');\r\n        }\r\n    }\r\n    #setDone() {\r\n        if (this.isDone) {\r\n            this.#emptyCheckboxSVG.style.display = 'none';\r\n            this.#checkboxSVG.style.display = 'block';\r\n            this.element.classList.add('completed');\r\n        }\r\n        else {\r\n            this.#emptyCheckboxSVG.style.display = 'block';\r\n            this.#checkboxSVG.style.display = 'none';\r\n            this.element.classList.remove('completed');\r\n        }\r\n    }\r\n    get delete() {\r\n        return this.#deleteSVG;\r\n    }\r\n    get checkbox() {\r\n        return this.#checkboxSVG;\r\n    }\r\n    get checkboxEmpty() {\r\n        return this.#emptyCheckboxSVG;\r\n    }\r\n    get star() {\r\n        return this.#starSVG;\r\n    }\r\n    get starEmpty() {\r\n        return this.#emptyStarSVG;\r\n    }\r\n    toggleStarred() {\r\n        this.isStarred = !this.isStarred;\r\n        this.#setStarred();\r\n    }\r\n    toggleDone() {\r\n        this.isDone = !this.isDone;\r\n        this.#setDone();\r\n    }\r\n    remove() {\r\n        this.element.remove();\r\n    }\r\n    setupInput() {\r\n        this.checkbox.addEventListener('click', () => {\r\n            this.toggleDone();\r\n        });\r\n        this.checkboxEmpty.addEventListener('click', () => {\r\n            this.toggleDone();\r\n        });\r\n        this.star.addEventListener('click', () => {\r\n            this.toggleStarred();\r\n        });\r\n        this.starEmpty.addEventListener('click', () => {\r\n            this.toggleStarred();\r\n        });\r\n    }\r\n}\r\n","import PlaceholderItem from './PlaceholderItem.js';\r\nimport Item from './Item.js';\r\nconst HTMLlist = document.getElementById('list');\r\nexport default class List {\r\n    itemsPerPage;\r\n    placeholderItems;\r\n    items;\r\n    constructor(itemsPerPage = 6) {\r\n        this.itemsPerPage = itemsPerPage;\r\n        document.documentElement.style.setProperty('--total-items', itemsPerPage.toString());\r\n        this.placeholderItems = [];\r\n        this.items = [];\r\n        this.createBlankItems();\r\n    }\r\n    updateHTML() {\r\n        const loadedItems = this.items;\r\n        this.items = [];\r\n        this.createItems(loadedItems);\r\n        this.createBlankItems();\r\n    }\r\n    createItems(items) {\r\n        items.forEach((item) => {\r\n            this.createItem(item.content, item.id, item.isStarred, item.isDone);\r\n        });\r\n    }\r\n    createItem(content, id, isStarred = false, isDone = false) {\r\n        if (content.trim() == '')\r\n            return;\r\n        if (id == null) {\r\n            id = `ID${Date.now()}`;\r\n        }\r\n        this.removeBlankItem();\r\n        const item = new Item(content, id, isStarred, isDone);\r\n        this.appendItem(item);\r\n        this.setupInput(item);\r\n    }\r\n    appendItem(item) {\r\n        if (this.items.length == 0 || item.isStarred) {\r\n            HTMLlist.prepend(item.element);\r\n            this.items.unshift(item);\r\n            return;\r\n        }\r\n        const lastItemElement = this.items[this.items.length - 1].element;\r\n        lastItemElement.insertAdjacentElement('afterend', item.element);\r\n        this.items.push(item);\r\n    }\r\n    removeBlankItem() {\r\n        if (this.totalItemsLength >= this.itemsPerPage &&\r\n            this.placeholderItems.length > 0) {\r\n            this.placeholderItems.pop().remove();\r\n        }\r\n    }\r\n    deleteItem(item) {\r\n        item.remove();\r\n        const index = this.items.findIndex((i) => {\r\n            return i.id === item.id;\r\n        });\r\n        this.items.splice(index, 1);\r\n        this.createBlankItem();\r\n    }\r\n    setupInput(item) {\r\n        item.delete.addEventListener('click', () => {\r\n            this.deleteItem(item);\r\n        });\r\n        item.starEmpty.addEventListener('click', () => {\r\n            this.starItem(item);\r\n        });\r\n        item.star.addEventListener('click', () => {\r\n            this.unStarItem(item);\r\n        });\r\n    }\r\n    starItem(item) {\r\n        this.createItem(item.content, undefined, item.isStarred, item.isDone);\r\n        this.deleteItem(item);\r\n    }\r\n    unStarItem(item) {\r\n        this.deleteItem(item);\r\n        this.createItem(item.content, undefined, item.isStarred, item.isDone);\r\n    }\r\n    createBlankItems() {\r\n        const numberOfBlanks = this.items == undefined\r\n            ? this.itemsPerPage\r\n            : this.itemsPerPage - this.items.length;\r\n        for (let i = 0; i < numberOfBlanks; i++) {\r\n            const placeholderItem = new PlaceholderItem();\r\n            HTMLlist.append(placeholderItem.element);\r\n            this.placeholderItems.push(placeholderItem);\r\n        }\r\n    }\r\n    createBlankItem() {\r\n        if (this.itemsPerPage < this.totalItemsLength + 1)\r\n            return;\r\n        const placeholderItem = new PlaceholderItem();\r\n        HTMLlist.append(placeholderItem.element);\r\n        this.placeholderItems.push(placeholderItem);\r\n    }\r\n    loadData(data, urlLoad = false) {\r\n        const listElem = document.getElementById('list');\r\n        if (urlLoad) {\r\n            let URLRawData = decodeURI(window.location.hash);\r\n            URLRawData = '#';\r\n            data = JSON.parse(URLRawData.slice(1));\r\n        }\r\n        data.forEach((item) => {\r\n            item.element = listElem.querySelector(`#${item.id}`);\r\n        });\r\n        this.createItems(data);\r\n        console.log(`Parsed 'localStorage data' as`, data);\r\n    }\r\n    removeURLData() {\r\n        window.location.hash = '';\r\n    }\r\n    get totalItemsLength() {\r\n        return this.items.length + this.placeholderItems.length;\r\n    }\r\n    get totalItems() {\r\n        return this.items.length;\r\n    }\r\n    get completedItems() {\r\n        let x = 0;\r\n        this.items.forEach((item) => {\r\n            if (item.isDone !== true)\r\n                return;\r\n            x++;\r\n        });\r\n        return x;\r\n    }\r\n    get todoItems() {\r\n        return this.totalItems - this.completedItems;\r\n    }\r\n    remove() {\r\n        this.items.forEach((item) => {\r\n            item.remove();\r\n        });\r\n        this.placeholderItems.forEach((placeholderItem) => {\r\n            placeholderItem.remove();\r\n        });\r\n        this.placeholderItems = [];\r\n        this.removeURLData();\r\n    }\r\n}\r\n","const placeholderItemTemplate = document.getElementById('placeholder-item');\r\nexport default class PlaceholderItem {\r\n    element;\r\n    constructor() {\r\n        const placeholderItemTemplateClone = placeholderItemTemplate.cloneNode(true);\r\n        this.element = placeholderItemTemplateClone.content.firstElementChild;\r\n    }\r\n    remove() {\r\n        this.element.remove();\r\n    }\r\n}\r\n","import { tabList } from './app.js';\r\nconst tabTemplate = document.getElementById('tab');\r\nconst tabTitle = document.querySelector('header')\r\n    ?.children[0];\r\nexport default class Tab {\r\n    element;\r\n    name;\r\n    id;\r\n    selected;\r\n    #close;\r\n    #edit;\r\n    #input;\r\n    savedList;\r\n    completed;\r\n    constructor(name = 'Unnamed', list, id = `ID${Date.now()}`, completed = false) {\r\n        this.selected = true;\r\n        this.createTab(name, list, id, completed);\r\n    }\r\n    createTab(name, list, id, completed) {\r\n        const tabTemplateClone = tabTemplate.cloneNode(true);\r\n        this.element = tabTemplateClone.content.firstElementChild;\r\n        this.#edit = this.element.querySelector('#edit');\r\n        this.#close = this.element.querySelector('#close');\r\n        this.#input = this.element.querySelector('#tab-input');\r\n        this.element.id = id;\r\n        this.id = id;\r\n        this.savedList = list;\r\n        this.name = name;\r\n        this.completed = completed;\r\n        if (completed) {\r\n            this.complete();\r\n        }\r\n        this.element.classList.add('grow');\r\n        this.select();\r\n        this.#input.value = name;\r\n        this.setupInput();\r\n    }\r\n    setupInput() {\r\n        this.#edit.addEventListener('click', () => {\r\n            this.#input.focus();\r\n        });\r\n        this.#close.addEventListener('click', () => {\r\n            this.remove();\r\n        });\r\n        this.#input.addEventListener('keyup', (e) => {\r\n            this.name = this.#input.value;\r\n            this.updateName(false);\r\n            if (e.key == 'Enter') {\r\n                this.#input.blur();\r\n            }\r\n        });\r\n    }\r\n    select() {\r\n        this.element.classList.add('selected');\r\n        this.selected = true;\r\n    }\r\n    deselect() {\r\n        this.element.classList.remove('selected');\r\n        this.selected = false;\r\n    }\r\n    complete() {\r\n        this.element.classList.add('tab-completed');\r\n        this.completed = true;\r\n    }\r\n    unComplete() {\r\n        this.element.classList.remove('tab-completed');\r\n        this.completed = false;\r\n    }\r\n    remove() {\r\n        tabList.removeTab(this.id);\r\n    }\r\n    updateName(updateTab = false) {\r\n        if (updateTab) {\r\n            this.name = tabTitle.value;\r\n            this.#input.value = this.name;\r\n        }\r\n        else {\r\n            this.name = this.#input.value;\r\n            if (this.selected) {\r\n                tabTitle.value = this.name;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import List from './List.js';\r\nimport Tab from './Tab.js';\r\nconst addTabButton = document.getElementById('add-tab');\r\nconst clearButton = document.getElementById('clear-button');\r\nconst tabTitle = document.querySelector('header')\r\n    ?.children[0];\r\nexport let currentList;\r\nexport default class TabList {\r\n    tabs = [];\r\n    #MAX_TABS;\r\n    constructor(MAX_TABS = 10) {\r\n        addTabButton.parentNode?.addEventListener('click', (e) => {\r\n            if (e.target instanceof Element && e.target.tagName === 'LI') {\r\n                if (e.target.id === 'add-tab') {\r\n                    this.createTab();\r\n                }\r\n                else {\r\n                    this.selectTab(e.target.id);\r\n                }\r\n            }\r\n        });\r\n        this.#MAX_TABS = MAX_TABS;\r\n        this.clearButton();\r\n        this.tabTitle();\r\n        this.loadData();\r\n        this.update();\r\n        window.addEventListener('click', () => {\r\n            this.update();\r\n        });\r\n        window.addEventListener('keydown', () => {\r\n            this.update();\r\n        });\r\n    }\r\n    selectTab(tabId) {\r\n        if (this.currentTab().id === tabId)\r\n            return;\r\n        this.tabs.forEach((tab) => {\r\n            if (tab.id === tabId) {\r\n                this.deselectTabs();\r\n                tab.select();\r\n                tab.updateName();\r\n                if (currentList)\r\n                    currentList.remove();\r\n                currentList = tab.savedList;\r\n                currentList.updateHTML();\r\n            }\r\n        });\r\n    }\r\n    deselectTabs() {\r\n        this.tabs.forEach((tab) => {\r\n            tab.deselect();\r\n        });\r\n    }\r\n    completeTab() {\r\n        this.currentTab().complete();\r\n    }\r\n    unCompleteTab() {\r\n        this.currentTab().unComplete();\r\n    }\r\n    removeTab(tabId) {\r\n        if (this.tabs.length === 1)\r\n            return;\r\n        for (let i = 0; i < this.tabs.length; i++) {\r\n            const tab = this.tabs[i];\r\n            if (tab.id === tabId) {\r\n                tab.element.classList.add('closing');\r\n                tab.element.addEventListener('animationend', () => {\r\n                    if (tab.selected) {\r\n                        function getIndex() {\r\n                            if (i === 0)\r\n                                return i + 1;\r\n                            return i - 1;\r\n                        }\r\n                        this.selectTab(this.tabs[getIndex()].id);\r\n                    }\r\n                    this.tabs[i].element.remove();\r\n                    this.tabs.splice(i, 1);\r\n                }, { once: true });\r\n            }\r\n        }\r\n    }\r\n    createTab(name, savedList, id, completed) {\r\n        if (this.tabs.length >= this.#MAX_TABS)\r\n            return;\r\n        this.clearSelectedTabs();\r\n        if (currentList)\r\n            currentList.remove();\r\n        if (!savedList) {\r\n            currentList = new List();\r\n            savedList = currentList;\r\n        }\r\n        const tab = new Tab(name, savedList, id, completed);\r\n        addTabButton.insertAdjacentElement('beforebegin', tab.element);\r\n        this.tabs.push(tab);\r\n        tab.updateName();\r\n    }\r\n    clearSelectedTabs() {\r\n        this.tabs.forEach((tab) => {\r\n            tab.deselect();\r\n        });\r\n    }\r\n    currentTab() {\r\n        const currentTab = this.tabs.find((tab) => tab.selected === true);\r\n        if (currentTab) {\r\n            return currentTab;\r\n        }\r\n        else {\r\n            throw new Error('Current tab returned undefined or null');\r\n        }\r\n    }\r\n    saveData() {\r\n        const tabListData = JSON.stringify(this.tabs);\r\n        localStorage.setItem('TabList', tabListData);\r\n    }\r\n    loadData() {\r\n        const rawData = localStorage.getItem('TabList');\r\n        if (!rawData) {\r\n            this.createTab();\r\n            return;\r\n        }\r\n        const data = JSON.parse(rawData);\r\n        let selectTabId;\r\n        data.forEach((tab) => {\r\n            this.createTab(tab.name, undefined, tab.id, tab.completed);\r\n            const listData = tab.savedList.items;\r\n            if (listData.length) {\r\n                currentList.loadData(listData);\r\n            }\r\n            if (tab.selected)\r\n                selectTabId = tab.id;\r\n        });\r\n        if (selectTabId)\r\n            this.selectTab(selectTabId);\r\n    }\r\n    update() {\r\n        if (currentList.items.every((item) => item.isDone === true) &&\r\n            currentList.items.length >= 1) {\r\n            this.completeTab();\r\n        }\r\n        else {\r\n            this.unCompleteTab();\r\n        }\r\n        if (currentList) {\r\n            const todoItems = document.getElementById('todo-items');\r\n            const completedItems = document.getElementById('completed-items');\r\n            const totalItems = document.getElementById('total-items');\r\n            todoItems.textContent = JSON.stringify(currentList.todoItems);\r\n            completedItems.textContent = JSON.stringify(currentList.completedItems);\r\n            totalItems.textContent = JSON.stringify(currentList.totalItems);\r\n            this.saveData();\r\n        }\r\n    }\r\n    clearButton() {\r\n        clearButton.addEventListener('click', () => {\r\n            currentList.remove();\r\n            currentList = new List();\r\n            this.currentTab().savedList = currentList;\r\n        });\r\n    }\r\n    tabTitle() {\r\n        tabTitle.addEventListener('keyup', (e) => {\r\n            this.currentTab().updateName(true);\r\n            if (e.key == 'Enter') {\r\n                tabTitle.blur();\r\n            }\r\n        });\r\n    }\r\n}\r\n","import Input from './Input.js';\r\nimport TabList from './TabList.js';\r\nexport const tabList = new TabList();\r\nnew Input();\r\nconsole.log(tabList);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./build/app/app.js\");\n",""],"names":[],"sourceRoot":""}